// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using evaluation_infrastructure.Db;

#nullable disable

namespace evaluation_infrastructure.Db.Migrations
{
    [DbContext(typeof(FeatureToggleDbContext))]
    partial class FeatureToggleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("evaluation_infrastructure.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<string>("HashedKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_key");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.PrimitiveCollection<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("OrgId", "ProjectId");

                    b.ToTable("api_keys", (string)null);
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("Actor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor");

                    b.Property<string>("After")
                        .HasColumnType("jsonb")
                        .HasColumnName("after");

                    b.Property<DateTimeOffset>("At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Before")
                        .HasColumnType("jsonb")
                        .HasColumnName("before");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.HasKey("Id");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.EnvironmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Key")
                        .IsUnique();

                    b.ToTable("environments", (string)null);
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("features", (string)null);
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.FeatureState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("enabled");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("environment_id");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid")
                        .HasColumnName("feature_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("FeatureId", "EnvironmentId")
                        .IsUnique();

                    b.ToTable("feature_states", (string)null);
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid")
                        .HasColumnName("org_id");

                    b.HasKey("Id");

                    b.HasIndex("OrgId", "Name")
                        .IsUnique();

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConditionsJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("conditions");

                    b.Property<Guid?>("EnvironmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("environment_id");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid")
                        .HasColumnName("feature_id");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_type");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("FeatureId", "EnvironmentId");

                    b.ToTable("rules", null, t =>
                        {
                            t.HasCheckConstraint("CK_rules_match_type", "match_type IN ('all','any')");
                        });
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.ApiKey", b =>
                {
                    b.HasOne("evaluation_infrastructure.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("evaluation_infrastructure.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Organization");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.EnvironmentEntity", b =>
                {
                    b.HasOne("evaluation_infrastructure.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.Feature", b =>
                {
                    b.HasOne("evaluation_infrastructure.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.FeatureState", b =>
                {
                    b.HasOne("evaluation_infrastructure.Entities.EnvironmentEntity", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("evaluation_infrastructure.Entities.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.Project", b =>
                {
                    b.HasOne("evaluation_infrastructure.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("evaluation_infrastructure.Entities.Rule", b =>
                {
                    b.HasOne("evaluation_infrastructure.Entities.EnvironmentEntity", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("evaluation_infrastructure.Entities.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Feature");
                });
#pragma warning restore 612, 618
        }
    }
}
