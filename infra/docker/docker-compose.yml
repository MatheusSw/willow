version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: evaluation-postgres
    restart: unless-stopped
    environment:
      # TODO: Manage the credentials properly, maybe using docker secrets
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=feature_toggle
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: evaluation-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  evaluation-api:
    build:
      context: ../../src/evaluation-api
      dockerfile: Dockerfile
    container_name: evaluation-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # TODO: Manage the credentials properly, maybe using docker secrets
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:8080
      - Redis__Configuration=redis:6379
    ports:
      - "8080:8080"

  admin-api:
    build:
      context: ../../src/admin-api
      dockerfile: Dockerfile
    container_name: admin-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:8081
      - Redis__Configuration=redis:6379
      - ConnectionStrings__Postgres=Host=postgres;Port=5432;Database=feature_toggle;Username=postgres;Password=postgres;
    ports:
      - "8081:8081"

volumes:
  pgdata:
  redisdata:
